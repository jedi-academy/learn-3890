<?xml version="1.0" encoding="UTF-8"?>
<!--
Tutorial 02c - Convert static site into CI webapp
-->
<tutorial status="v1.1">
	<!-- Activity metadata ... override anything from the course or organizer -->
    
	<!-- The meat of the presentation -->
	<slide title="Tutorial Goals" layout="normal">
		<p>This tutorial will walk you through converting a basic CodeIgniter 
			into a "good" one.</p>
		<p>The approach taken is not the only one possible, or even the best one,
			but it suits "baby steps".</p>
              
		<p>Suggestion: you may want to skim the slideshow first,
			before working your way through it.</p>
	</slide>

	<slide title="Let's Switch to a Database" layout="normal">
		<div class="left">
			<p>We already have a SQL script in the <code>setup</code> folder of our starter.
				How convenient! It's like someone planned to use a database eventually :-/</p>
			<p>The first step is to create a database.</p>
                        <p>Using phpMyadmin (for instance), create a database with that name (`comp4711` or `picassos`),
select it, and then use the phpmyadmin "import" command, choosing
"data/images.sql" as the data source.</p>
			<p>Alternately, you could do the same thing inside NetBeans, 
                            though a bit more awkward. Select the "Services" tab, to the right of the "Projects"
                            and "Files" tabs in the left panel. You will see a *Databases* item.
                        You may have to register your MYSQL instance, but can then open a JDBC connection
                        to MYSQL, "create database xxx" as a SQL command, and then copy/paste
                        the contacts.sql script into a SQL execution window and run it.</p>
		</div>
		<div class="right">
		</div>
	</slide>

	<slide title="Configure Our App For the Database" layout="normal">
		<div class="left">
			<p>Once the database has been created and populated,
                        we need to configure our app to connect to this database,
                        and we need to make sure that the database driver is loaded.</p>
			<p>The databse connection is specified in 
                            <code>config/database</code>.php, where you adjust the settings for your
				system.  The database name to use would be the one
                        you created on the previous slide, eg "comp4711" or "picassos",</p>
			<p>The database driver can be pre-loaded In <code>config/autoload.php</code>.</p>
		</div>
		<div class="right">
			<img class="scale" width="365" height="432" src="/pix/tutorials/ci2/2-46.png"/>
			<br/>
			<img class="scale" width="471" height="44" src="/pix/tutorials/ci2/2-46b.png"/>
		</div>
	</slide>

	<slide title="DANGER - We Have a Breach?" layout="normal">
		<p>Changing the database configuration *will* expose
			your MySQL password if you commit and push the project
			as it sits. Oh no!!!!!</p>
		<p>For now, <code>git ignore</code> the database configuration
			file, <code>config/database.php</code>. We will override
			that one file with settings that work on our system, for testing,
			and you will not be compromising security. Phew!
		</p>
		<p>Later in the course, I will show you how to securely have
			different database settings for multiple environments.</p>
	</slide>

	<slide title="Now We Can Add a Model" layout="normal">
		<div class="left">
			<p>We only need two methods in
				our model: get all images, ordered properly, and get
				the three newest images.</p>
			<p>We can use a simple model, which I suggest calling <code>Images</code>.
				It is used on most of our pages, hence is safe to autoload in
				our configuration. We will add the missing methods on
				upcoming slides.</p>
				<p>Our model should go in <code>application/models.Images.php</code></p>
		</div>
		<div class="right">
			<img class="scale" width="398" height="242" src="/pix/tutorials/ci2/2-47.png"/>
			<br/> 
			<img class="scale" width="343" height="50" src="/pix/tutorials/ci2/2-47b.png"/>
		</div>
	</slide>

	<slide title="Flesh Out the Model" layout="normal">
		<div class="left">
			<p>Instead of hard-coding image names like the original static site,
				we can generate the HTML for those programmatically, in our
				Gallery controller.</p>
			<p>We will need to add a suitable method to our Images model to
				provide all of the image data. Let's call it <code>all()</code>, and have 
				it return an array of images, in reverse posting order
				(newest ones first).</p>
			<p>The executable statements use CodeIgniter's query builder
				component, which will be explored in an upcoming lesson.</p>
		</div>
		<div class="right">
			<img class="scale" width="488" height="336" src="/pix/tutorials/ci2/2-48.png"/>
		</div>
	</slide>

	<slide title="How Do We Exploit the Model?" layout="normal">
		<div class="left">
			<p>Looking at <code>views/gallery</code>, for example, it should
			be apparent that the formatting for each image is the same.</p>
			<p>What does change is the attribute values for each image.</p>
			<p>The fragment to the right shows the presentation of
				an image, as a table cell, and reformatted to make
				it easier to see the whole entry..</p>
		</div>
		<div class="right">
			<br/> 
			<img class="scale" width="600" height="102" src="/pix/tutorials/ci2/2-47a.png"/>
		</div>
	</slide>

	<slide title="Let's Handle a Single Image" layout="normal">
		<div class="left">
			<p>We can make a view fragment to handle the HTML
				for a single image, replacing hard-coded values
				with those associated with a single row in our
				data table.</p>
			<p>Copy the code for one image table cell,
				and tailor it to use the appropriate field names
				from our database as substitution fields.</p>
			<p>Save this as <code>views/_cell.php</code>. The underscore at the
				front of the name reinforces that this is for internal
				use, a common convention but not a standard.</p>
			<p>Notice that there is no PHP in the view fragment :)</p>
		</div>
		<div class="right">
			<br/> 
			<img class="scale" width="600" height="174" src="/pix/tutorials/ci2/2-49.png"/>
		</div>
	</slide>

	<slide title="Let's Generate Our Gallery" layout="normal">
		<div class="left">
			<p>We can use the HTML table class to generate the HTML
				for our table now. This logic would go inside our Gallery controller.</p>
				<p>We can extract all of the image records from our model,
				build an array of HTML fragments, one per image, and save
				these as the values to use in the HTML table that will be
				presented in the browser view.</p>
				<p>We can use CodeIgniter's 
					<a href="http://www.codeigniter.com/user_guide/libraries/table.html" target="_blank">Table library</a>
					to generate the HTML for this, saving the result in a view
					parameter (<code>thetable</code>) for the gallery view.
				</p>
		</div>
		<div class="right">
			<br/> 
			<img class="scale" width="600" height="546" src="/pix/tutorials/ci2/2-50.png"/>
		</div>
	</slide>

	<slide title="... And Then Adjust the View" layout="normal">
		<div class="left">
				<p>
					<code>views/gallery</code> can then be simplified, replacing the entire table
					HTML with <code>{thetable}</code>.
				</p>
		</div>
		<div class="right">
			<br/> 
			<img class="scale" width="484" height="88" src="/pix/tutorials/ci2/2-47c.png"/>
		</div>
	</slide>

	<slide title="What Does It Look Like?" layout="normal">
		<div class="left">
			<p>Can you see a difference?</p>
		</div>
		<div class="right">
			<br/> 
			<img class="scale" width="600" height="397" src="/pix/tutorials/ci2/2-51.png"/>
		</div>
	</slide>

	<slide title="Revisit the Homepage" layout="normal">
		<div class="left">
			<p>The homepage shows the 3 most recent images posted. 
				This is very similar to the gallery, and we can
				leverage what we did for it.</p>
			<p>Add a newest() method to our model, which just returns
				the 3 newest images.</p>
		</div>
		<div class="right">
			<img class="scale" width="474" height="467" src="/pix/tutorials/ci2/2-52.png"/>
		</div>
	</slide>

	<slide title="Fix the Homepage View" layout="normal">
		<div class="left">
			<p>Adjust the "welcome" view, the same way
				we changed the "gallery" view.</p>
		</div>
		<div class="right">
			<img class="scale" width="595" height="103" src="/pix/tutorials/ci2/2-53.png"/>
		</div>
	</slide>

	<slide title="Fix the Homepage Controller" layout="normal">
		<div class="left">
			<p>Finally, update the "Welcome" controller, similarly
				to the Gallery one.</p>
		</div>
		<div class="right">
			<img class="scale" width="600" height="538" src="/pix/tutorials/ci2/2-54.png"/>
		</div>
	</slide>

	<slide title="Are We There Yet?" layout="normal">
		<div class="left">
			<p>We are indeed there:)</p>
			<p>We have successfully converted a static website into a
				CodeIgniter webapp.</p>
			<p>There are many efficiencies that could be achieved
				with re-factoring, but the idea and the process should be clear.</p>
			<p>This would be an appropriate point to push your local changes
				to your github repo.</p>
		</div>
		<div class="right">
			<img class="scale" width="600" height="287" src="/pix/tutorials/ci2/2-55.png"/>
		</div>
	</slide>

   
</tutorial>
