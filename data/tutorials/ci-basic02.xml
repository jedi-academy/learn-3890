<?xml version="1.0" encoding="UTF-8"?>
<!--
Tutorial 02c - Convert static site into CI webapp
-->
<tutorial status="v1.1">
	<!-- Activity metadata ... override anything from the course or organizer -->
    
	<!-- The meat of the presentation -->
	<slide title="Tutorial Goals" layout="normal">
		<p>This tutorial will walk you through converting a trivial webapp
			(the result of completing tutorial "ci-basic01" into a basic CodeIgniter webapp.</p>
		<p>The approach taken is not the only one possible, or even the best one,
			but it suits "baby steps".</p>
              
		<p>Suggestion: you may want to skim the slideshow first,
			before working your way through it.</p>
	</slide>

	<slide title="What Do You Have?" layout="normal">
		<div class="left">
			<p>The trivial website looks the same as the original,
				but it has been partially transformed.</p>
			<p>Your gallery webapp has controllers, but each of those
				just loads a view which is basically the original HTML
				file renamed.</p>
			<p>In this tutorial, we will take the website to the next level.</p>
		</div>
		<div class="right">
			<img class="scale" width="600" height="287" src="/pix/tutorials/ci2/2-55.png"/>
		</div>
	</slide>

	<slide title="Build a Master View Template" layout="normal">
		<div class="left">
			<p>Eliminate duplicate code in our views by extracting
				the common opening and closing HTML into <code>views/template.php</code>,
				replacing the template that came with the CI starter.</p>
			<p>Let's do that, and add a placeholder, <code>{content}</code>, which will
				get substituted appropriately in our next tutorial step.
				Add another placeholder, <code>{pagetitle}</code>, for the page title.</p>
		</div>
		<div class="right">
			<img class="scale" width="600" height="432" src="/pix/tutorials/ci2/2-40.png"/>
		</div>
	</slide>

	<slide title="Template Notes" layout="normal">
			<p>I would do this by deleting the CI starter's <code>template.php</code>,
				copying the <code>about.php</code> view that we have at the moment, renaming it
				to <code>template.php</code>, and then zapping its middle. The resulting 
				"template" should resemble the screenshot to the right.</p>            
				<p>The CSS and Javascript references from the original HTML
				files still work, because they are referring to locations
				relative to what the browser considers our document root,
				which Apache understands to be the folder containing
					<code>index.php</code>. A better practice would be to
					modify such references so they really do reference the document
					root, for instance changing <code>href="css/reset.css"</code>
					to <code>href="/css/reset.css"</code>.
				</p>
	</slide>

	<slide title="Simplify Our Views" layout="normal">
		<div class="left">
			<p>We can now eliminate the common opening and closing HTML
				(the part we extracted into a "template")
				from our three original views, leaving just the "meat".</p>
			<p>Our revised <code>views/welcome.php</code>, for instance, is shown to the right.
				All that remains is what was inside the orignal "content" div.</p>
		</div>
		<div class="right">
			<img class="scale" width="600" height="285" src="/pix/tutorials/ci2/2-41.png"/>
		</div>
	</slide>

	<slide title="Setup Our Base Controller" layout="normal">
		<div class="left">
			<p>The CodeIgniter starter came with a base controller, 
				<code>applciation/core/MY_Controller</code>, which we
				avoided using earlier. We can rectify that, now that the template
				and "meat" views are ready.</p>
			<p>First of all, correct the 'pagetitle' parameter on line 26 of
				the base controller, changing it to a more suitable title.</p>
			<p>We don't need the 'ci_version' parameter set on line 27,
				but there is no harm in leaving it in ... that is up to you.</p>
		</div>
		<div class="right">
			<img class="scale" width="600" height="421" src="/pix/tutorials/ci2/2-43.png"/>
		</div>
	</slide>
 
	<slide title="Apply our base controller" layout="normal">
		<div class="left">
			<p>Each of our three controllers can now be updated to use
				the base controller's rendering, by setting the name
				of the "real" content for it, and asking for the
				page to be built..</p>
			<p>The body of each's <code>index()</code> method should be updated.
				Instead of <br/>
				<code>$this->load->view(XXX);</code> 
				<br/>it should read<br/>
				<code>$this->data['pagebody'] = XXX; <br/>$this->render();</code>
			</p>           
		</div>
		<div class="right">
			<img class="scale" width="389" height="240" src="/pix/tutorials/ci2/2-44.png"/>
		</div>
	</slide>
 
	<slide title="Are We There Yet?" layout="normal">
		<div class="left">
			<p>The site is looking the same as when we started, but it is
				constructed very differently internally.</p>
			<p>The next tutorial will add a database-driven model to make
				the content dynamic, instead of using hard-coded image
				filenames.</p>
			<p>This would be an appropriate point to push your local changes
				to your github repo.</p>
		</div>
		<div class="right">
			<img class="scale" width="600" height="287" src="/pix/tutorials/ci2/2-55.png"/>
		</div>
	</slide>

   
</tutorial>
