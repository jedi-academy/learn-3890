<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 10 - Role-Based Access Control
-->
<lesson status="2.1">
    <!-- Activity metadata ... override anything from the course or organizer -->

    <!-- Agenda -->
    <slide title="Agenda" layout="normal">
        <ol>
            <li>
                <a href="#{tag1}">Client-Server Architecture</a>
            </li>
            <li>
                <a href="#{tag2}">REST Philosophy</a>
            </li>
            <li>
                <a href="#{tag3}">RESTful "Standards"</a>
            </li>
            <li>
                <a href="#{tag4}">REST in CodeIgniter</a>
            </li>
            <li>
                <a href="#{tag5}">REST Issues</a>
            </li>
        </ol>
    </slide>


    <!-- Normal slides -->

    <slide title="1. CLIENT-SERVER ARCHITECTURE" layout="normal" tag="tag1">
        <div class="left">
            <p>A distributed system is one in which the components are
                conceptually or literally on different servers.</p>
            <p>These can be arranged formally or informally.</p>
            <br/>
            <img class="scale" src="/pix/lessons/y/01.png"/>
        </div>
        <div class="right">
            <p>A more formal arrangement affords the opportunity for
                more rigorous security between external and internal
                components, which will influence connection
                technology choices.</p>
            <img class="scale" src="/pix/lessons/y/02.gif"/>
        </div>
    </slide>
    
    <slide title="Client-Server Connections" layout="normal" >
        <div class="left">
            <p>The components are connected to each other
                on several levels, using choices of one or more conventions at each
                level, a.k.a. "glue":</p>
            <center>
                <p>Transport: HTTP, HTTPS, AJAX</p>
                <p>Representation: XML, JSON, RSS</p>
                <p>Application: RPC, SOA, REST</p>
            </center>
        </div>
        <div class="right">
            <p>When two components are connected, one is usually consuming
                data or a service provided by or managed by another.</p>
            <img class="scale" src="/pix/lessons/y/03.png"/>
            <p>Of course, a component can be both a client (for some
                services) and a server (for other services).</p>
        </div>
    </slide>

    <slide title="Remote Procedure Calls (RPC)" layout="normal" >
        <div class="left">
            <br/>
            <img class="scale" src="/pix/lessons/r1.png"/>
        </div>
        <div class="right">
            <p>With a conventional Remote Procedure Call technique,
                like XML-RPC, arguments for a remote procedure are
                converted into a transportable data format, and sent to the RPC
                server. The data structure is dictated by the remote method's signature.</p>
            <p> The arguments are extracted remotely, and passed to
                the appropriate method of the handling object there.
                The reverse process is used to return results or
                an error/fault message.</p>
        </div>
    </slide>

    <slide title="Service Oriented Architecture (SOA)" layout="normal" >
        <div class="left">
            <br/>
            <img class="scale" src="/pix/lessons/r2.png"/>
        </div>
        <div class="right">
            <p>A Service Oriented Architecture (SOA) technique is similar to RPC,
                except that a server needs to register with a naming service, and the
                client needs to consult the naming service to locate
                a suitable server to send requests to.</p>
            <p>Arguments for a remote service, and the response, are
                converted into a transportable data format, and exchanged between client
                and server using one of several delivery methods. The data structure is dictated by the configuration
                provided to the naming service, for both client and server.</p>
        </div>
    </slide>

    <slide title="Representational State Transfer (REST)" layout="normal">
        <div class="left">
            <br/>
            <img class="scale" src="/pix/lessons/y/11.png"/>
        </div>
        <div class="right">
            <p>REST  is the current "darling" of inter-application "glue".</p>
            <p>It provides for flexible transport protocols, flexible data representation
                formats, and guidelines for expected client and server behavior.</p>
            <p>There is, alas, still a lot of room for interpretation, and this
                is more often called "RESTful".</p>
        </div>           
    </slide>

    <slide title="Microservices" layout="normal">
        <div class="left">
            <br/>
            <img class="scale" src="/pix/lessons/y/04.png"/>
        </div>
        <div class="right">
            <p>Microservices are an emerging trend, particularly with
                cloud computing platforms.</p>
            <p>The notion is to have multiple fine-grained servers
                rather than fewer coarse-grained servers. The microservices
                are meant to be small, easy to replace, and independently deployable.</p>
            <p>Caution (from Wikipedia): there is no industry consensus yet 
                regarding the properties of microservices, and
                an official definition is missing as well. </p>
        </div>           
    </slide>


    <slide title="2. REST PHILOSOPHY" layout="normal"  tag="tag2">
        <div>
            <p>REST is an architectural style or philosophy, not a standard.</p>
            <ul>
                <li>Map resources (not usecases) to URLs</li>
                <li>Map CRUD usecases to HTTP types</li>
                <li>Pass all needed data (representational state)</li>
                <li>Accept or deliver multiple formats (XML, JSON, JSONP, CSV, XHTML, text)</li>
            </ul>
        </div>    
    </slide>

    <slide title="REST URLs" layout="normal" >
        <div class="left">
            <p>A REST endpoint is intended to identify a resource, and
                the intended action is denoted by the type of HTTP
                request sent.</p>
            <img class="scale" src="/pix/lessons/y/12.png"/>
        </div>
        <div class="right">
            <p>An example, where any data would be part of the HTTP
                message payload:</p>
            <ul>
                <li>Http-get: <code>/product</code> returns a list of products</li>
                <li>Http-get: <code>/product/123</code> returns product 123</li>
                <li>Http-post: <code>/product/123</code> creates product 123</li>
                <li>Http-put: <code>/product/123</code> updates product 123</li>
                <li>Http-delete: <code>/product/123</code> deletes product 123</li>
            </ul>    
        </div>           
    </slide>

    <slide title="REST Implementation" layout="normal" >
        <div class="left">
            <p>A REST client needs to convert a local object into an acceptable
                data format, and to then emit the kind of HTTP request appropriate 
                to the intended action.</p> 
            <p>A REST server needs to convert an incoming object state representation
                into a local object, and to dispatch the request to
                an appropriate handling object/method based on the HTTP request type.</p>
        </div>
        <div class="right">
            <p>In the diagram below, "Trip Management" provides a REST server
                endpoint for users on smartphones, and it has a REST client
                which sends requests to the "Passenger Management" REST server
                endpoint.</p>       
            <img class="scale" src="/pix/lessons/y/13.png"/>
        </div>       
    </slide>

    <slide title="3. &quot;RESTful&quot; STANDARDS" layout="normal" tag="tag3">
        <p>This sounds wonderful, no? What could possibly go wrong?</p>
        <p>The biggest problem is that there is no REST standard.</p>
        <p>Different developers, large and small, have chosen to interpret
            the REST philosophy differently or only partially, with confusing
            and/or conflicting implementations and expectations.</p>
        <p>The industry consensus is, that conforming to two or more
            of the REST principles, fully or partially, entitles you
            to claim to be "RESTful".</p>
        <p>Examples follow :)</p>
    </slide>

    <slide title="RESTful Routing" layout="normal">
        <p>Some have chosen to elaborate on REST URLs,
            adding parameters or using the plural vs singular
            of a resource name.</p>
        <img class="scale" src="/pix/lessons/y/14.jpg"/>
    </slide>

    <slide title="RESTful Pagination" layout="normal">
        <p>REST doesn't provide guidance for pagination through
            large data sets.</p>
        <p>Some developers have chosen to add pagination parameters
            (eg ?page=x).</p>
        <p>Some developers have chosen to provide a "Load more results" button,
            or to automatically load more results as you scroll to the
            bottom of a webpage. These hide how the pagination
            is being handled.</p>
    </slide>

    <slide title="RESTful Data Formats" layout="normal">
        <p>Some developers have chosen to allow only JSON
            data to be exchanged. Lookup JSON-REST (hehe).</p>
        <p>Many developers have chosen to handle only JSON
            or XML data exchange, considering the other formats
            unsafe (JSONP) or not well supported (CSV).</p>
    </slide>

    <slide title="RESTful Endpoints" layout="normal">
        <p>Some developers have chosen subdomains for their
            endpoints, which suits microservices. An example would
            be <code>tickets.movies.com</code>
        </p>
        <p>Other developers have chosen a subordinate
            URI segment as a REST endpoint, eg <code>movies.com/tickets</code>.
            Sadly, some developers understand this to mean that the "tickets"
            REST service is a form of "HMVC" :-/</p>
        <p>Some developers have chosen multiple endpoints for what is
            intended to be a single REST service, eg. <code>movies.com/ticket</code> and
            <code>movies.com/tickets</code>
        </p>
    </slide>

    <slide title="RESTful Content Negotiation" layout="normal">
        <p>The desired data format could be specified in your HTTP request header, like
            <code>Accept: application/xml</code>, and similarly your provided data
            <code>Content-Type: application/xml</code>. 
            Valid types: application/json, application/xml, application/xhtml+xml</p>
        <p>The desired data format could be implied in your request URL, like
            <code>/product/123.json</code>
        </p>
        <p>The desired data format could be implied as a query parameter,
            like <code>/product/123?format=json</code>
        </p>
        <p>Some REST libraries allow any of these!</p>
        <p>REST does not provide enough guidance.</p>
    </slide>

    <slide title="RESTful Services" layout="normal" >
        <div class="left">
            <p>Just when you thought it was safe to venture in the waters...</p>
            <p>Some major players have decided to offer REST service
                endpoints for their RPC or SOA services.</p>
            <ul>
                <li>URL segments can be significant</li>
                <li>only POST requests accepted</li>
                <li>content negotiation</li>
                <li>only JSON &amp; XML supported</li>
            </ul>
        </div>
        <div class="right">
            <p>Say what? They are using RESTish techniques for
                service controllers, and not for resource controllers?</p>
            <p>Or worse, they are using RESTish for both resources
                and services.</p>
            <p>Yup - makes you want to cry.</p>
        </div>       
    </slide>

    <slide title="RESTful Confusion" layout="normal" >
        <div class="left">
            <p>Oh dear, this isn't very helpful!</p>
            <p>Nope.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" src="/pix/lessons/y/19.jpg"/>
        </div>       
    </slide>


    <slide title="4. REST IN CODEIGNITER" layout="normal" tag="tag4">      
        <ul>
            <li>Stateless :)</li>
            <li>URL mapping native :)</li>
            <li>URL mapping supposed to be controllers for usecases :(</li>
            <li>HTTP payload not easily accessed :(</li>
            <li>HTTP type not originally supported :-/</li>
            <li>Emitting HTTP-POST not part of CI or PHP style :((</li>
        </ul>        
    </slide>

    <slide title="CodeIgniter Solution #1" layout="normal">
        <p>Add-Ons...</p>
        <ul>
            <li>RESTclient base library as abstraction layer</li>
            <li>RESTserver as base controller (tho awkward parms)</li>
            <li>Curl library for low-level HTTP types, in &amp; out</li>
            <li>Format library for multiple format support</li>
        </ul>
        <p>This is only one choice ... there are multiple conflicting conventions or interpretations</p>
          
    </slide>

    <slide title="CodeIgniter RESTful Client" layout="normal">
        <p>Adapted from Phil Sturgeon's REST client, all format conversion is 
            automatically handled by the REST layer, though you can tailor it.</p>
        <code>
            <pre>
                // Load the library
                $this->load->library('rest');

                // Run some setup
                $this->rest->initialize(array('server' => OUR_SERVER_NAME));

                // use get/post/... as appropriate	
                $answer = $this->rest->get(methodURI,parameters_array);

                // need to convert &amp; pick apart the response      
            </pre>
        </code>
        
    </slide>

    <slide title="CodeIgniter RESTful Server" layout="normal">
        <p>Adapted from Phil Sturgeon's REST server, all format conversion is 
            automatically handled by the REST layer, and incoming
            requests are automatically mapped to the appropriate method.</p>
        <code>
            <pre>
                class Service extends Rest_controller {

                function index_get() {
                ...
                $this->response($assoc_array,$http_code);
                }

                function index_post() { ... }
                function index_put() { ... }
                function index_delete() { ... }

                }            </pre>
        </code>
    </slide>

    <slide title="CodeIgniter Solution #2" layout="normal">
        <p>Map requests by HTTP type</p>
        <ul>
            <li>$route['product']['get'] = 'product/get';</li>
            <li>$route['product']['put'] = 'product/put';</li>
            <li>$route['product']['post'] = 'product/post';</li>
            <li>etc ...</li>
        </ul>
        <p>This does not address format conversions, nor does it clarify other REST issues :(</p>
        <p>You would still need to deal with data format conversions, and you would
            need to provide sets of HTTP-verb based routing rules for each "service".</p>
          
    </slide>

    <slide title="CodeIgniter Solution #3" layout="normal">
        <p>POST only, with clever client requests</p>
        <ul>
            <li>[curl](http://php.net/manual/en/book.curl.php)</li>
            <li>[php-http](https://github.com/php-http)</li>
            <li>[guzzle](http://docs.guzzlephp.org/en/stable/)</li>
            <li>[Unirest](http://unirest.io/php.html)</li>
        </ul>
        <p>This does not address format conversions, nor does it clarify other REST issues :(</p>
        <p>You would still need to deal with data format conversions, but
            you would not have to worry about incoming HTTP verbs.</p>
          
    </slide>

    <slide title="5. REST ISSUES" layout="normal" tag="tag5">
        
        <ul>
            <li>Anyone/everyone can claim to be RESTful!</li>
            <li>No guidance on large data / pagination</li>
            <li>No guidance on filtering parameters handling</li>
            <li>“Extensions” to formats (eg “PHP”)</li>
            <li>Some formats have issues (JSONP, CSV)</li>
            <li>Seeing through the hype (Web 3.0000...)</li>
        </ul>
 
    </slide>

    <slide title="REST Misuses" layout="normal">
        <p>These are the common misuses I see with RESTful services:</p>
        <ul>
            <li>REST controllers (endpoints) may identify a resource
                (eg Users) or they may identify a service (eg GeoLocation)</li>
            <li>If (mis)used for a service API, it is typical
                to use HTTP verbs to denote changes or not, and/or the scope
                of changes, upon successful handling of the request</li>
            <li>Many services provide for data to be passed as key/value
                pairs (POST-style), and they claim to be RESTful if those
                key/value pairs can be JSON or XML encoded</li>
            <li>Many services interpret the "state transfer" as only needing
                anything that has changed, 
                i.e. more PATCH-oriented than POST-oriented.</li>                
            <li>In the cases above, if the endpoints map to an API,
                and only GET and POST are supported, but the data format
                is flexible, does this make the service RESTish?
                and would then "resource controllers" be truly RESTful?</li>
        </ul>
    </slide>

    <slide title="Application glue makes total sense now" layout="normal" >
        <ul>
            <li>XML-RPC is like a Jeep</li>
            <li>SOA(P) is like a highly automated luxury car</li>
            <li>Microservices are like ride-hailing, with a one city block limit</li>
            <li>REST is like a DIY car, built from kits or parts that claim to fit together</li>
        </ul>
        <p>Yup, makes sense to me :-/</p>
    </slide>
    <slide title="REST - DO YOU CARE?" layout="normal" >
        <p>“REST” displacing XML-RPC and SOAP</p>
        <p>Social networking APIs becoming reliant on it (or company interpretations of it)</p>
        <br/>
        <p>So, yeah</p>
    </slide>

</lesson>

