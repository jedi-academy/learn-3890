<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 06 - Helpers & Addons
-->
<lesson status="v1.3">
    <!-- Activity metadata ... override anything from the course or organizer -->

    <!-- Agenda -->
    <slide title="Agenda" layout="normal">
        <ol>
            <li>
                <a href="#{tag1}">Working With CodeIgniter</a>
            </li>
            <li>
                <a href="#{tag2}">Working With Libraries</a>
            </li>
            <li>
                <a href="#{tag3}">Working With Helpers</a>
            </li>
            <li>
                <a href="#{tag4}">Working With Packages</a>
            </li>
            <li>
                <a href="#{tag5}">Dependency Management</a>
            </li>
        </ol>
    </slide>


    <!-- Normal slides -->

    <slide title="1. WORKING WITH CODEIGNITER" layout="normal" tag="tag1">
        <p>So far, your webapp has been assembled using components appropriate 
            to your webapp's usecases. These include controllers,
            models and views, naturally. You have also used some helpers and 
            libraries, either built-in (such as the form validation library)
            or added from other sources.</p>
        <p>In this lesson, we shall take a closer look at libraries and helpers,
            and at some of the other ways to build on the framework
            to make a better webapp.</p>
    </slide>

    <slide title="Loading Components" layout="normal">
        <p>Building on CodeIgniter requires a good understanding of how it
            finds and loads components.</p>
        <p>When CodeIgniter loads components, it looks
            first in the appropriate subfolder inside your
            <code>application</code> folder, and then in the
            appropriate subfolder inside the framework's
            <code>system</code> folder.
        </p>
        <p>The CodeIgniter loader applies its own naming
            rules when looking for components, for instance
            looking only for the "ucfirst" filename
            corresponding to a library, or appending
            an appropriate extension ("_helper") when
            looking for a helper. You already know to watch
            out for this if developing on Windows and
            deploying on *nix!</p>
    </slide>

    <slide title="Loaded Components" layout="normal">
        <p>CodeIgniter maintains a list of unique loaded
            classes, regardless of where they came from.
            This means that you cannot have a controller
            and a model with the same class name, as the
            first to be loaded will be returned whenever
            you ask for either. This problem is addressed
            in PHP by using namespaces and/or fully qualified
            classnames, as in Java - that will not be properly
            exploited in CI until version 4.</p>
        <p>If a requested class is not in CI's loaded class list,
            it will attempt to locate it and instantiate one.</p>
    </slide>

    <slide title="Finding Components" layout="normal">
        <p>In the case of O-O classes without inheritance, 
            CodeIgniter will check 
            inside <code>application/xxx</code> folder, and then in 
            <code>system/xxx</code>, where "xxx" is the kind of
            component you are loading.</p>
        <p>In the case of an O-O class which extends another
            class of yours, the superclass needs to be loaded first.</p>
        <p>In the case of an O-O class which extends one of CI's
            classes, CI will automatically look for the superclass
            in the <code>system/xxx</code> folder.</p>
    </slide>

    <slide title="Extending Core CI Components" layout="normal">
        <p>CodeIgniter provides its own way to extend framework
            components. In the case of 
            <a href="http://www.codeigniter.com/user_guide/general/core_classes.html">"core" components</a>,
            your extensions go inside <code>application/core</code>,
            as you have seen with our base controller and base model.
        </p>
        <p>If you are replacing a core component with one of
            your own, it needs to be named with the "CI_" prefix.
            For example, <code>CI_Security</code> replaces the
            built-in "Security" component, automatically.
        </p>
        <p>If you are extending a core component, with over-riding
            methods, yours would use the "MY_" prefix and it would
            extend the built-in one with the "CI_" prefix.
            For example, <code>MY_Security</code> would extend
            <code>CI_Security</code>, and would be expected to
            over-ride one or more methods.
        </p>
        <p>
            <strong>Do NOT modify source code inside the <code>system</code> folder!</strong>
        </p>
    </slide>

    <slide title="Extending Non-Core CI Components" layout="normal">
        <p>Non-core CodeIgniter components can be 
            <a href="http://www.codeigniter.com/user_guide/general/creating_libraries.html">extended similarly</a> to
            core components, except using the <code>application/libraries</code>
            folder.
        </p>
        <p>If you are replacing a CI component with one of
            your own, it needs to be named with the "CI_" prefix.
            For example, <code>CI_Pagination</code> replaces the
            built-in "Pagination" component, automatically.
        </p>
        <p>If you are extending a CI component, with over-riding
            methods, yours would use the "MY_" prefix and it would
            extend the built-in one with the "CI_" prefix.
            For example, <code>MY_Pagination</code> would extend
            <code>CI_Pagination</code>, and would be expected to
            over-ride one or more methods.
        </p>
        <p>
            The cool thing here is that you still refer to the CI component name.
            For example, <code>$this->load->library('pagination')</code>
            will automatically load <code>application/libraries/MY_Pagination</code>,
            <code>application/libraries/CI_Pagination</code>, or
            <code>system/libraries/CI_Pagination</code>, as appropriate :)
        </p>
        <p>
            <strong>Do NOT modify source code inside the <code>system</code> folder!</strong>
        </p>
    </slide>

    <slide title="2. Working With Libraries" layout="normal" tag="tag2">
        <div class="left">
            <p>Libraries are files that contain class definitions - 
                usually one per file.</p>
            <p>Libraries can be explicitly loaded, as in
                <code>$this->load->library('whatever');</code>,
                or they can be autoloaded in <code>application/config/autoload.php</code>,
                for instance <code>$autoload['libraries'] = array('parser');</code>.
            </p>
            <p>Library "functions" are O-O.</p>
            <p>The image to the right shows the libraries built-in to CodeIgniter.
                Some of the names show in blue - those have app-configured adapters
                to do their thing using different tools, such as file or database
                persistence for sessions.</p>
                
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="580" height="154" src="/pix/lessons/6/6-2.png"/>
        </div>
    </slide>

    <slide title="Writing Libraries" layout="normal">
        <div class="left">
            <p>Each library is meant to hold a single useful class.</p>
            <p>You don't have to worry about libraries being loaded twice -
                the CodeIgniter loader takes care of that.</p>    
        </div>
        <div class="right">
            <p>A typical library excerpt...<br/>
                <code>
&lt;?php<br/>
                    class Whatever {<br/>
&#160;&#160;function do_something_useful(...) {<br/>
&#160;&#160;&#160;&#160;...<br/>
&#160;&#160;}<br/>
                    }
                </code>
            </p>
        </div>
    </slide>

    <slide title="Extending Built-In Libraries" layout="normal">
        <p>In application/libraries/MY_Foo.php: <br/>
            <code>
                class MY_Foo extends CI_Foo {<br/>
&#160;&#160;function a() {...}<br/>
&#160;&#160;function b() {...}
                }</code>
                    
        </p>
        <p>In system/libraries/Foo.php: <br/>
            <code>
                class CI_Foo {<br/>
                }
            </code>
        </p>
        <p>In your controller using "foo": <br/>
            <code>
                $this->load->library('foo');</code>
            <br/>
            Your controller will end up with a "foo" instance
            injected as a property, namely <code>$this->foo</code>
        </p>
    </slide>

    <slide title="Caboose - a Sample CodeIgniter Library" layout="normal">
        <p>
            <i>An <b>example</b> library, to help your understanding,
                is described in the related <a href="/show/lesson/basic05b">Example Library and
                    Helper</a> lesson.
                .</i>
        </p>
        <p>For reference, you can find it inside a 
            <a href="https://github.com/jedi-academy/package-caboose">github repository</a> :)
        </p>
    </slide>


    <slide title="3. Working With Helpers" layout="normal" tag="tag3">
        <div class="left">
            <p>Helpers are files that contain one or more procedural functions.
                A number of them are built into CodeIgniter, as shown to the right.</p>
            <p>Helpers can be explicitly loaded, as in
                <code>$this->load->helper('whatever');</code>,
                or they can be autoloaded in <code>application/config/autoload.php</code>,
                for instance <code>$autoload['helper'] = array('url');</code>.
                Use the name of the helper without the extension.
            </p>
            <p>Helper functions are not O-O, but they are simpler
                than having classes with static methods and referring to those.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="575" height="136" src="/pix/lessons/6/6-1.png"/>
        </div>
    </slide>

    <slide title="Writing Helpers" layout="normal">
        <div class="left">
            <p>Each helper file is meant to hold a set of *related* functions.</p>
            <p>One good practice is to ensure that helpers cannot be loaded
                outside the context of CodeIgniter. This is done by making sure that
                the <code>BASEPATH</code> constant is defined.</p>
            <p>Another good practice, with functions, is to make sure they are not
                already defined (which would trigger a PHP error). This is done
                using the <code>function_exists</code> function built into PHP.</p>    
        </div>
        <div class="right">
            <p>A typical helper excerpt...<br/>
                <code>
&lt;?php<br/>
                    defined('BASEPATH') OR exit('No direct script access allowed');<br/>
                    <br/>
                    if ( ! function_exists('do_something_useful')) {<br/>
&#160;&#160;function do_something_useful(...) {<br/>
&#160;&#160;&#160;&#160;...<br/>
&#160;&#160;}<br/>
                    }
                </code>
            </p>
        </div>
    </slide>

    <slide title="Extending Built-In Helpers" layout="normal">
        <p>In application/helpers/MY_foo_helper.php: <br/>
            <code>
                function a() {...}<br/>
                function b() {...}</code>
        </p>
        <p>In system/helpers/foo_helper.php: <br/>
            <code>
                function a() {...}<br/>
                function c() {...}</code>
        </p>
        <p>In your controller using "foo": <br/>
            <code>
                $this->load->helper('foo');</code>
            <br/>
            functions a and b come from your code, while function c comes from the built-in.
        </p>
    </slide>

    <slide title="Formfields - a Sample CodeIgniter Helper" layout="normal">
        <p>
            <i>An <b>example</b> helper, to help your understanding,
                is described in the related <a href="/show/lesson/basic05b">Example Library and
                    Helper</a> lesson.
                .</i>
        </p>
        <p>For reference, you can find it inside a 
            <a href="https://github.com/jedi-academy/package-caboose">github repository</a> :)
        </p>
    </slide>

    <slide title="4. Working With Packages" layout="normal" tag="tag4">
        <p>Packages are collections of related components organized 
            in a file hierarchy similarly to <code>application/</code>.</p>
        <p>Packages are not "loaded", in the conventional sense - their
            folders are added to the appropriate list of folders to search
            when the CI loader is invoked.
            Packages can be explicitly specified, as in</p>
        <code>$this->load->add_package_path(APPPATH.'third_party', '/some_package');</code>
        <p>or they can be autoloaded in <code>application/config/autoload.php</code>,
            for instance </p>
        <code>$autoload['packages'] = array(APPPATH.'third_party', '/some_package');</code>.
    </slide>

    <slide title="Package Folder Structure" layout="normal">
        <p>Packages contain most things that might be in an app, with one
            glaring exception ... can you spot it?</p>
        <code>
            /application/third_party/some_package/<br/>
            <br/>
            config/<br/>
            helpers/<br/>
            language/<br/>
            libraries/<br/>
            models/<br/>
            views/
        </code>
    </slide>

    <slide title="Writing Packages" layout="normal">
        <div class="left">
            <p>The components in a package are written and referenced "normally".
                They become "visible" when the package's path is added to
                the loader.</p>
            <p>Package paths are pre-pended to the list of folders to search,
                in the order that you add them, i.e. LIFO.</p>
            <p>"Normal" component loading rules apply inside a package too.</p>    
        </div>
        <div class="right">
            <p>Packages are meant to be self-contained.</p>
            <p>Packages will often come from outside projects.</p>
            <p>Naming collisions are possible, and not properly dealt with -
                namespaces in a future CodeIgniter will fix that.</p>
        </div>
    </slide>

    <slide title="Extending Built-In Packages?" layout="normal">
        <p>No packages are built-in to CodeIgniter.</p>
        <p>There are not a lot of good examples, at the moment.</p>
        <p>A suggested best practice is to "install" a package by
            creating a folder for it, inside <code>application/third_party</code>,
            and copying the packages files and subfolder structure there.</p>
        <p>Treat this notion of packages as CodeIgniter-specific.</p>
    </slide>


    <slide title="5. DEPENDENCY MANAGEMENT" layout="normal" tag="tag5">
        <div class="left">
            <p>
                <a href="https://getcomposer.org/" target="_blank">Composer</a>
                is the de facto standard for managing package dependencies.</p>
            <p>CodeIgniter supports Composer and its autoloading. Describe your webapp dependencies
                in a <code>composer.json</code> file in your document root, like that shown to the
                right.</p>
            <p>Incorporate third party plugins by running composer from the command line
                or through your IDE</p>
        </div>
        <div class="right">
            <code>
                {<br/>
&#160;&#160;"description": "The CodeIgniter Website",<br/>
&#160;&#160;"homepage": "http://codeigniter.com",<br/>
&#160;&#160;"name": "bcit-ci/codeigniter-website",<br/>
&#160;&#160;"license": "MIT",<br/>
&#160;&#160;"config": {<br/>
&#160;&#160;&#160;&#160;"vendor-dir": "application/vendor"<br/>
&#160;&#160;},<br/>
&#160;&#160;"require": {<br/>
&#160;&#160;&#160;&#160;"php": ">=5.3.2",<br/>
&#160;&#160;&#160;&#160;"knplabs/github-api": "~1.5"<br/>
&#160;&#160;}<br/>
                }
            </code>
        </div>
 
    </slide>

    <slide title="Using Composer in Your Webapp" layout="normal">
        <p>To use Composer inside a CodeIgniter app automatically,
            indicate so inside your <code>application/config/config.php</code>.
        </p>
        <ul>
            <li>
                <code>$config['composer_autoload'] = TRUE;</code> or
            </li>
            <li>
                <code>$config['composer_autoload'] = '/path/to/vendor/autoload.php';</code>
            </li>
        </ul>
    </slide>

    <slide title="Gimme More!" layout="normal">
        <div class="left">
            <p>Check the User Guide ...</p>
            <ul>
                <li>
                    <a href="http://www.codeigniter.com/userguide3/general/creating_libraries.html" target="_blank">Libraries</a>
                </li>
                <li>
                    <a href="http://www.codeigniter.com/userguide3/general/helpers.html" target="_blank">Helpers</a>
                </li>
                <li>
                    <a href="http://www.codeigniter.com/userguide3/libraries/loader.html" target="_blank">Packages</a>
                </li>
            </ul>
        </div>
        <div class="right">
            <p>Outside of the framework itself ...</p>
            <ul>
                <li>
                    The CI forums, the CI wiki (big reader beware caution), Google, packageist.org, github.com
                </li>
                <li>
                    <a href="https://codecanyon.net/tags/codeigniter" target="_blank">CodeCanyon</a>
                </li>
                <li>
                    <a href="https://forum.codeigniter.com/forum-13.html" target="_blank">Suggestions on the forum</a>
                </li>
                <li>
                    <a href="https://github.com/codeigniter-id/awesome-codeigniter" target="_blank">curated list of addins</a>
                </li>
            </ul>
        </div>
    </slide>
    
</lesson>
