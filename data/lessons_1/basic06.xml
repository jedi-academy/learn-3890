<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 06 - Routing
-->
<lesson status="v2.1">

    <slide title="Routing" layout="normal">
        <p>Routing is the <b>process</b> of determining how to handle an incoming
            request. This can be done by explicit configuration, or "by
            convention".</p>
        <p>All frameworks support routing by <b>configuration</b>.
            CodeIgniter can also handle routing by <b>convention</b>,
            with controllers expected to be found inside
            <code>application/controllers</code>
            without additional or specific configuration.</p>
        <p>Routing is essential to a framework. Many frameworks
            were started by figuring out the routing first, and then
            by designing and building components to support the
            routing and the "controllers" that would be the result
            of "doing" the routing.</p>
    </slide>

	<!-- Agenda -->
	<slide title="Agenda" layout="normal">
		<ol>
			<li>
				<a href="#{tag1}">Different Perspectives</a>
			</li>
			<li>
				<a href="#{tag2}">CodeIgniter Routing</a>
			</li>
			<li>
				<a href="#{tag3}">Routing Rules</a>
			</li>
			<li>
				<a href="#{tag4}">Error Routing</a>
			</li>
		</ol>
	</slide>


    <slide title="1. #URIsMatter" layout="normal" tag="tag1">
        <p>The form of a URI matters. It means different
            things in different contexts, as shown on the next
            few slides.</p>
        <p>The "generally accepted best practice" is to try to
            configure a webapp so that URIs are "SEO-friendly".
            That means they don't include the front controller
            (index.php) in their name, and that anything
            intended to identify a "resource" is part of
            the URI and not the query string.</p>
    </slide>


    <slide title="Apache View of URIs" layout="normal" >
        <p>Apache needs to know either what to return for a request
            (eg. the contents of a named file) or what object to
            execute in response to a request (eg. index.php).
        </p>
        <table>
            <tr>
                <th>URI</th>
                <th>Object</th>
            </tr>
            <tr>
                <td>
                    <code>/stuff</code>
                </td>
                <td>The file "stuff" in the document root</td>
            </tr>
            <tr>
                <td>
                    <code>/stuff</code> with "index.php" injected</td>
                <td>The "index.php" script in the document root</td>
            </tr>
            <tr>
                <td>
                    <code>/index.php/stuff</code>
                </td>
                <td>The "index.php" script in the document root</td>
            </tr>
            <tr>
                <td>
                    <code>/index.php?c=stuff</code>
                </td>
                <td>The "index.php" script in the document root</td>
            </tr>
        </table>
        <p>If the file or object is not found, Apache returns a 404.</p>
        <p>With an appropriate <code>.htaccess</code>, the "index.php"
            can be hidden from your users, yet Apache still does the right thing.</p>
    </slide>

    <slide title="CodeIgniter View of URIs" layout="normal"  tag="tag1">
        <p>CodeIgniter needs to know which controller and method to
            execute in response to a request (eg. Stuff::hithere.php).
        </p>
        <table>
            <tr>
                <th>URI</th>
                <th>Object</th>
            </tr>
            <tr>
                <td>
                    <code>/stuff</code>
                </td>
                <td>If the file "stuff" exists in the document root,
                    Apache handles the request.</td>
            </tr>
            <tr>
                <td>
                    <code>/stuff</code> with "index.php" injected</td>
                <td>Invoke the "index" method of the "Stuff" controller.</td>
            </tr>
            <tr>
                <td>
                    <code>/index.php/stuff</code>
                </td>
                <td>Invoke the "index" method of "Stuff" controller.</td>
            </tr>
            <tr>
                <td>
                    <code>/index.php?c=stuff</code>
                </td>
                <td>Invoke the "index" method of "Stuff" controller.
                    This assumes proper configuration.</td>
            </tr>
        </table>

    </slide>

    <slide title="SEO View of URIs" layout="normal"  tag="tag1">
        <p>Search engines need to know the "resource" to
            associate with a request
        </p>
        <table>
            <tr>
                <th>URI</th>
                <th>Object</th>
            </tr>
            <tr>
                <td>
                    <code>/stuff</code>
                </td>
                <td>"stuff"</td>
            </tr>
            <tr>
                <td>
                    <code>/stuff</code> with "index.php" injected</td>
                <td>"stuff"</td>
            </tr>
            <tr>
                <td>
                    <code>/index.php/stuff</code>
                </td>
                <td>index.php.stuff</td>
            </tr>
            <tr>
                <td>
                    <code>/index.php?c=stuff</code>
                </td>
                <td>index.php</td>
            </tr>
        </table>
        <p>If the request returns a 404, the search engine will treat
            the content as unavailable.</p>
        <p>Only if you hide "index.php" or provide appropriate
            routing, will SEO engines associate the correct
            "resource" with your content.</p>
    </slide>

       <slide title="2. CodeIgniter Routing" layout="normal" tag="tag2">
        <p>To do routing, CodeIgniter...</p>
        <ol>
            <li>splits the URI into segments</li>
            <li>if the first segment is a folder identifier,
                drill down into it and repeat</li>
            <li>run through the routing rules, looking for a match</li>
            <li>treat the first segment as a controller name; bail if not</li>
            <li>if we have a controller, treat the second segment as a method
            name, defaulting to "index"</li>
            <li>if no segments, look for a default controller in
                the "current" folder</li>
            <li>if still not resolved, trigger a CI 404.</li>
        </ol>
                
    </slide>
    
	<slide title="Default Controllers" layout="normal">
		<p>One of the CodeIgniter configuration settings, in
                    <code>application/config/routes.php</code>, is for the
			"default controller" ...<br/>
			<code>$route['default_controller'] = 'welcome';</code>
		</p>
		<p>This applies only if the first URI segment appears to identify a subfolder
			inside <code>application/controllers</code>, and no routing rule 
			matches the incoming request; or if there is no controller
                        segment in the URI.
		</p>
		<p>In such a case, the incoming request is interpreted with the "default
			controller" value added to the end, identifying the expected controller.</p>
		<p>If CodeIgniter can still not determine the appropriate controller to handle
			the request, it will return a CodeIgniter 404 error page.</p>
	</slide>

    <slide title="3. Routing Rules" layout="normal" tag="tag3">
        <div class="left">
            <p>
                Routing rules are configured in <code>application/config/routes.php</code>
            </p>
            <p>The rules are expressed as elements of the <code>$routes</code>
                array, and are tested in the order they are defined.
            In other words, define them from more specific to less specific.</p>
            <p>Each rule uses a regular expression as its key,
                and a "target" as its value.</p>
            <p>The "regular expressions" do
                not always include strange symbols :)
                They can also use shorthand "wildcard" notation for better readability.</p>
        </div>
        <div class="right">
            <p>Some examples of routing rules:</p>
            <p>
                <code>$route['blog/joe'] = "blogs/users/34";</code>
            </p>
            <p>
                <code>$route['product/(:num)'] = "catalog/product_lookup_by_id/$1";</code>
            </p>
            <p>
                <code>$route['page/(:any)'] = 'welcome/page/$1';</code>
            </p>
            <p>
                <code>$route['secret/(:any)/(:any)'] = 'youllneverfindme/$1/$2';</code>
            </p>
            <p>
                <code>$route['products/([a-z]+)/(\d+)'] = "$1/id_$2";</code>
            </p>
        </div>
    </slide>

	<slide title="Wildcard Routing" layout="normal">
		<div class="left">
			<p>A routing rule can use a "wildcard" token,
				<code>(:num)</code> to match a numeric segment value, or
				<code>(:any)</code> to match any segment value.
			</p>
			<p>Specify an expression using these as the "key" for a routing
				rule, and specify the proper destination as the "value".</p>
			<p>You can use the substitution token <code>$n</code>
				to reference a "base 0" URI segment in the original request.</p>
		</div>
		<div class="right">
			<p>Some examples of routing rules:</p>
			<p>
				<code>$route['blog/joe'] = "blogs/users/34";</code>
			</p>
			<p>
				<code>$route['product/(:num)'] = "catalog/product_lookup_by_id/$1";</code>
			</p>
			<p>
				<code>$route['page/(:any)'] = 'welcome/page/$1';</code>
			</p>
			<p>
				<code>$route['secret/(:any)/(:any)'] = 'youllneverfindme/$1/$2';</code>
			</p>
		</div>
	</slide>

	<slide title="Regular Expression Routing" layout="normal">
		<p>You can also use a conventional regular expression in a routing rule.</p>
		<p>For instance:<br/>
			<code>$route['products/([a-z]+)/(\d+)'] = "$1/id_$2";</code>
			<br/>
			would remap <code>/products/banana/25</code> 
			to <code>/banana/id_25</code>
		</p>
		<p>Another example:<br/>
			<code>$route['([a-z]+)/register'] = 'assimilate/$0';</code>
			<br/>
			would remap <code>/jim/register</code> 
			to <code>/assimilate/jim</code>
		</p>
	</slide>

    <slide title="Routing Targets" layout="normal">
        <div class="left">
            <p>The "target" of a routing rule identifies a CI
                controller and method to execute, possibly with additional parameters
                passed on.</p>
            <p>The target could also be a closure, namely an anonymous function
            defined in the rule, which would return a string result.
            CI calls this a "callback function".</p>
        </div>
        <div class="right">
            <p>Some examples of routing rules:</p>
            <p>
                <code>$route['blog/joe'] = "blogs/users/34";</code>
            </p>
            <p>
                <code>$route['product/(:num)'] = "catalog/product_lookup_by_id/$1";</code>
            </p>
             <p>
                <code>$route['products/([a-z]+)/(\d+)'] = "$1/id_$2";</code>
            </p>
        </div>
    </slide>

    <slide title="HTTP Routing" layout="normal">
        <p>Routing rules apply regardless of the HTTP verb used to send
        the request.</p>
        <p>You can specify different routing for different HTTP verbs, if
        that makes sense for your application, by putting the
        verb name as a second index for a rule, for instance 
            <code>$route['products']['put'] = 'product/insert';</code>
        </p>
        <p>This is useful for a RESTful service, but only part of what is needed.</p>
        <p>RESTful <b>needs</b> HTTP verb based handling, object identifiers 
        as part of the request path, incoming and
        outgoing content type negotiation, <b>and</b>
        proper object state representation as the payload.</p>
    </slide>


	<slide title="Callback Routing" layout="normal">
		<p>You can use closures in place 
			of the normal routing rules to process the back-references.
		CodeIgniter calls this "callback routing".</p>
		<p>For instance:<pre><code>
	$route['products/([a-zA-Z]+)/edit/(\d+)'] =
	function ($product_type, $id) {
		return 'catalog/product_edit/' . strtolower($product_type) . '/' . $id;
	};			</code></pre>
		</p>
		<p>
			This is code to execute, NOT a controller. In the above example, the two matched tokens
			would be passed as the parameters  <code>$product_type</code> and 
			<code>$id</code>.
                        The closure function returns tha name of the controller appropriate
                        for this matched pattern.
		</p>
	</slide>

	<slide title="4. Error Routing" layout="normal" tag="tag4">
		<p>If the handling of a request cannot be determined,
			CodeIgniter shows a default "404 error page".</p>
		<p>You can provide your own, possibly with additional
			information or perhaps just using the same
			styling as the rest of your site, by specifying a 
			reserved route in the configuration file.</p>
			<p>For instance, <code>$route['404_override'] = 'mybad/complain';</code>
			would direct such an error to the <code>complain</code> method
			of your <code>Mybad</code> controller, which could use
			the <a href="http://www.codeigniter.com/user_guide/libraries/uri.html"
			   target="_blank">URI class</a> to retrieve the offending request string.
		</p>
	</slide>

	<slide title="Routing Recap" layout="normal">
		<p>CodeIgniter normally routes requests to controllers by convention.</p>
		<p>These conventions can be over-ridden by providing routing rules,
                each of which contains a regular expression pattern, and a target
                identifying how that request could be handled.</p>
                <p>A routing target prescribes either a handling controller and method,
                or else a callback function.</p>
                <p>There are a few advanced techniques, but these are the basics.</p>
	</slide>


</lesson>
